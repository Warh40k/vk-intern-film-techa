// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Warh40k/vk-intern-filmotecka/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Actor is an autogenerated mock type for the Actor type
type Actor struct {
	mock.Mock
}

// CreateActor provides a mock function with given fields: actor
func (_m *Actor) CreateActor(actor domain.Actor) (int, error) {
	ret := _m.Called(actor)

	if len(ret) == 0 {
		panic("no return value specified for CreateActor")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Actor) (int, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(domain.Actor) int); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(domain.Actor) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActor provides a mock function with given fields: id
func (_m *Actor) DeleteActor(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListActors provides a mock function with given fields: filmId
func (_m *Actor) ListActors(filmId int) ([]domain.Actor, error) {
	ret := _m.Called(filmId)

	if len(ret) == 0 {
		panic("no return value specified for ListActors")
	}

	var r0 []domain.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Actor, error)); ok {
		return rf(filmId)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Actor); ok {
		r0 = rf(filmId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(filmId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchActor provides a mock function with given fields: actor
func (_m *Actor) PatchActor(actor domain.ActorInput) (domain.Actor, error) {
	ret := _m.Called(actor)

	if len(ret) == 0 {
		panic("no return value specified for PatchActor")
	}

	var r0 domain.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.ActorInput) (domain.Actor, error)); ok {
		return rf(actor)
	}
	if rf, ok := ret.Get(0).(func(domain.ActorInput) domain.Actor); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Get(0).(domain.Actor)
	}

	if rf, ok := ret.Get(1).(func(domain.ActorInput) error); ok {
		r1 = rf(actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActor provides a mock function with given fields: actor
func (_m *Actor) UpdateActor(actor domain.Actor) error {
	ret := _m.Called(actor)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Actor) error); ok {
		r0 = rf(actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewActor creates a new instance of Actor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Actor {
	mock := &Actor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
