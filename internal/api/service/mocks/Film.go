// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Warh40k/vk-intern-filmotecka/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Film is an autogenerated mock type for the Film type
type Film struct {
	mock.Mock
}

// CreateFilm provides a mock function with given fields: film, actorIds
func (_m *Film) CreateFilm(film domain.Film, actorIds []int) (int, error) {
	ret := _m.Called(film, actorIds)

	if len(ret) == 0 {
		panic("no return value specified for CreateFilm")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Film, []int) (int, error)); ok {
		return rf(film, actorIds)
	}
	if rf, ok := ret.Get(0).(func(domain.Film, []int) int); ok {
		r0 = rf(film, actorIds)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(domain.Film, []int) error); ok {
		r1 = rf(film, actorIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFilm provides a mock function with given fields: id
func (_m *Film) DeleteFilm(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListFilms provides a mock function with given fields: sortBy, sortDir, actorId
func (_m *Film) ListFilms(sortBy string, sortDir string, actorId int) ([]domain.Film, error) {
	ret := _m.Called(sortBy, sortDir, actorId)

	if len(ret) == 0 {
		panic("no return value specified for ListFilms")
	}

	var r0 []domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) ([]domain.Film, error)); ok {
		return rf(sortBy, sortDir, actorId)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) []domain.Film); ok {
		r0 = rf(sortBy, sortDir, actorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(sortBy, sortDir, actorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchFilm provides a mock function with given fields: input, actorIds
func (_m *Film) PatchFilm(input domain.NullableFilm, actorIds []int) (domain.Film, error) {
	ret := _m.Called(input, actorIds)

	if len(ret) == 0 {
		panic("no return value specified for PatchFilm")
	}

	var r0 domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NullableFilm, []int) (domain.Film, error)); ok {
		return rf(input, actorIds)
	}
	if rf, ok := ret.Get(0).(func(domain.NullableFilm, []int) domain.Film); ok {
		r0 = rf(input, actorIds)
	} else {
		r0 = ret.Get(0).(domain.Film)
	}

	if rf, ok := ret.Get(1).(func(domain.NullableFilm, []int) error); ok {
		r1 = rf(input, actorIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchFilm provides a mock function with given fields: query
func (_m *Film) SearchFilm(query string) ([]domain.Film, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for SearchFilm")
	}

	var r0 []domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Film, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Film); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFilm provides a mock function with given fields: film, actorIds
func (_m *Film) UpdateFilm(film domain.Film, actorIds []int) error {
	ret := _m.Called(film, actorIds)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFilm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Film, []int) error); ok {
		r0 = rf(film, actorIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFilm creates a new instance of Film. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilm(t interface {
	mock.TestingT
	Cleanup(func())
}) *Film {
	mock := &Film{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
